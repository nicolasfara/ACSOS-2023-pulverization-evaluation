incarnation: protelis

environment:
  type: OSMEnvironment
  parameters: ["cesena.pbf", true, true]

_constants:
  max_instance_power: &max_instance_power 200.0 # [W]
  max_battery_capacity: &max_battery_capacity 4500.0 # [mAh]
  startup_min_capacity: &startup_min_capacity 500.0 # [mAh]
  recharge_rate: &recharge_rate 4500.0 # [mAh]
  personal_start_charge_threshold: &personal_start_charge_threshold 5.0 # [%]
  personal_stop_charge_threshold: &personal_stop_charge_threshold 50.0 # [%]

variables:
  max_lat: &max_lat
    formula: 44.14795317094557
  min_lat: &min_lat
    formula: 44.13340676305022
  max_lon: &max_lon
    formula: 12.267570291912632
  min_lon: &min_lon
    formula: 12.235568921311268
  latitude_space: &latitude_space
    formula: max_lat - min_lat
  longitude_space: &longitude_space
    formula: max_lon - min_lon
  city_poi: &city_poi
    formula: 200
  # Simulations variables
  device_count: &device_count
    type: GeometricVariable
    parameters: [ 10, 10, 1000, 5 ]
  battery_discharge_time: # [hours]
    type: ArbitraryVariable
    parameters: [3, [3, 6, 12, 24]]
  low_battery_threshold: &low_battery_threshold # [%]
    type: ArbitraryVariable
    parameters: [30, [ 0, 30]]
  high_battery_threshold: &high_battery_threshold # [%]
    type: ArbitraryVariable
    parameters: [70, [70, 100.0]]
  epi_ratio:
    type: ArbitraryVariable
    parameters: [3, [ 3, 30 ] ]
  cloud_epi: &cloud_epi # [nJ]
    type: ArbitraryVariable
    parameters: [300, [3, 30, 300]]
  device_epi: &device_epi # [nJ]
    formula: cloud_epi.toDouble() / epi_ratio
    language: kotlin
  behaviour_instructions: &behaviour_instructions
#    formula: String.format("%.12f", (14.85 / battery_discharge_time) / (device_epi / 1000.0) / 2) # the [/ 1000.0] is a hack to convert to Millions of instruction (the /2 means the behaviour is always half of the consumption)
    formula: 14.85 * 1000 / battery_discharge_time.toDouble() / device_epi.toDouble() # the [/ 1000.0] is a hack to convert to Millions of instruction
    language: kotlin
  comm_instructions: &comm_instruction
    formula: behaviour_instructions.toDouble() / 4
  sensors_instructions: &sensors_instructions
    formula: behaviour_instructions.toDouble() / 4
  intra_comm_instruction: &intra_comm_instruction
    formula: behaviour_instructions.toDouble() / 4
  os_device_instructions: &os_device_instructions
    formula: behaviour_instructions.toDouble() / 4
  final_time: &final_time
    formula: 12 * 3600 # 12h
  seed: &seed
    min: 0
    max: 9
    step: 1
    default: 0
  city_poi_coordinates: &city_poi_coordinates
    formula: |
      import kotlin.random.Random
      val random = Random(seed.toInt())
      generateSequence {
        listOf(random.nextDouble(min_lat, max_lat), random.nextDouble(min_lon, max_lon))
      }.take(city_poi).toList()
    language: kotlin

seeds:
  scenario: *seed
  simulation: *seed

_move_on_map: &move_on_map
  - time-distribution: 0.5
    program: org:protelis:moveOnMap

_discharge: &discharge
  - time-distribution: 0.5
    program: org:protelis:dischargeBattery

_setup-device: &setup-device
  - type: Event
    time-distribution:
      type: Trigger
      parameters: 0
    actions:
      - type: RunProtelisProgram
        parameters: org:protelis:setupDevice

_cloud-consumption: &cloud-consumption
  - time-distribution: 0.5
    program: org:protelis:cloudConsumption

_moving-policy: &moving-policy
  - time-distribution: 0.5
    program: org:protelis:movingPolicy

_move: &move
  - type: Event
    time-distribution: 0.1
    actions:
      - type: TargetMapWalker
        parameters: [target, 1.4]
    conditions:
      - type: MoleculeHasConcentration
        parameters: [isMoving, true]
  - type: Event # Triggers the first target
    time-distribution:
      type: Trigger
      parameters: 0
    actions:
      - type: RunProtelisProgram
        parameters: org:protelis:moveOnMap

_device: &device
  type: Rectangle
  parameters: [*device_count, *min_lat, *min_lon, *latitude_space, *longitude_space]
  programs: [*setup-device, *move_on_map, *move, *discharge, *cloud-consumption, *moving-policy]
  properties:
    - type: it.nicolasfarabegoli.pulverization.OnLowBattery
    - type: it.nicolasfarabegoli.pulverization.OnHighBattery
    - type: it.nicolasfarabegoli.pulverization.DischargeBattery
  contents:
    - molecule: minLon
      concentration: *min_lon
    - molecule: maxLon
      concentration: *max_lon
    - molecule: minLat
      concentration: *min_lat
    - molecule: maxLat
      concentration: *max_lat
    - molecule: target
      concentration: [0, 0]
    - molecule: home
      concentration: [0, 0]
    - molecule: isHome
      concentration: true
    - molecule: cityPOINumber
      concentration: *city_poi
    - molecule: cityPOIs
      concentration: *city_poi_coordinates
    - molecule: batteryPercentage
      concentration: 100.0 # The current level of the battery expressed in percentage
    - molecule: currentCapacity
      concentration: 4500.0 # The actual battery capacity. This value is randomized in setupDevice.pt
    - molecule: maxBatteryCapacity
      concentration: *max_battery_capacity # The maximum capacity for a battery of a device [mAh]
    - molecule: startupMinCapacity
      concentration: *startup_min_capacity # The minimum capacity for a battery of a device [mAh]
    - molecule: rechargeRate
      concentration: *recharge_rate # The recharge rate of the battery 1C (recharge rate) [mAh]
    - molecule: personalStartChargeThreshold
      concentration: *personal_start_charge_threshold # The percentage under which the person will recharge the device. This value is randomized at startup.
    - molecule: personalStopChargeThreshold
      concentration: *personal_stop_charge_threshold # The percentage over which the person will stop recharge the device. This value is randomized at startup.
    - molecule: lowBatteryReconfiguration
      concentration: *low_battery_threshold # The battery level below which a configuration is triggered [battery %]
    - molecule: highBatteryReconfiguration
      concentration: *high_battery_threshold # The battery level above which a configuration is triggered [battery %]
    - molecule: behaviourInstructions
      concentration: *behaviour_instructions # The discharge rate caused by the execution of the _Behaviour_ component in the device [mAh]
    - molecule: communicationInstructions
      concentration: *comm_instruction # *communication_cost # The discharge rate caused by the execution of the _Communication_ component in the device [mAh]
    - molecule: sensorsInstructions
      concentration: *sensors_instructions # *sensors_cost # The discharge rate caused by the execution of the _Sensors_ component in the device [mAh]
    - molecule: intraCommInstructions
      concentration: *intra_comm_instruction #*intra_comm_cost # The discharge rate caused by the communication with a remote component (pulverization) [mAh]
    - molecule: behaviourInDevice
      concentration: true # Set to `true` if the _Behaviour_ component is executed in the device
    - molecule: behaviourInCloud
      concentration: false # Set to `true` if the _Behaviour_ component is executed in the cloud
    - molecule: isCharging
      concentration: false # Set `true` if the device is charging
    - molecule: isMoving
      concentration: true # Set to `true` if the device is moving
    - molecule: cloudConsumption
      concentration: 0.0 # The contribution to the consumption in the cloud belonging to this device
    - molecule: batteryConsumption
      concentration: 0.0 # The battery consumption of the device
    - molecule: totalConsumption
      concentration: 0.0 # The total consumption related to the device. Is the sun of the previous two
    - molecule: osDeviceInstructions
      concentration: *os_device_instructions # The maximum consumption of the device NOT related to the application execution
    - molecule: instanceCost
      concentration: 0.2 # Cost of the instance of AWS [$/h]
    - molecule: maxInstancePower
      concentration: *max_instance_power # Max power consumption for cloud instance [W]
    - molecule: cloudCost
      concentration: 0.0 # The current cloud cost [$]
    - molecule: deviceEPI
      concentration: *device_epi # [nJ]
    - molecule: cloudEPI
      concentration: *cloud_epi # [nJ]

deployments:
  - *device

terminate:
  - type: AfterTime
    parameters: *final_time

export:
  - type: CSVExporter
    parameters:
      exportPath: "data"
      fileNameRoot: "export"
      interval: 120
    data:
      - type: Time
        parameters:
          precision: 5
      - molecule: "behaviourInDevice"
        aggregators: [ sum ]
      - molecule: "behaviourInCloud"
        aggregators: [ sum ]
      - molecule: "batteryPercentage"
        aggregators: [ mean ]
        precision: 5
      - molecule: "batteryConsumption"
        aggregators: [ sum ]
        precision: 5
      - molecule: "cloudConsumption"
        aggregators: [ sum ]
        precision: 5
      - molecule: "totalConsumption"
        aggregators: [ sum ]
        precision: 5
      - molecule: "isCharging"
        aggregators: [ sum ]
      - molecule: "isMoving"
        aggregators: [ sum ]
      - type: it.nicolasfarabegoli.pulverization.interop.CloudCost
        parameters:
          precision: 5
