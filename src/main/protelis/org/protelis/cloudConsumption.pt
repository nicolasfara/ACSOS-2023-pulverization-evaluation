module org:protelis:cloudConsumption
import it.nicolasfarabegoli.pulverization.interop.ProtelisInterop.updateCloudCosts

def jouleToWatt(joule, time) = joule / time

def calculateCloudConsumption(delta) {
    let cloudEPI = env.get("cloudEPI")
    let behaviourInstructions = env.get("behaviourInstructions")
    let intraCommInstructions = env.get("intraCommInstructions")
    let behaviourInCloud = env.get("behaviourInCloud")

    let cloudJoule = (behaviourInstructions * cloudEPI) + (intraCommInstructions * cloudEPI)
    let cloudWatt = jouleToWatt(cloudJoule, delta)

    if (behaviourInCloud) { cloudWatt } else { 0.0 }
}

let now = self.getCurrentTime();

rep (stillNow <- now) {
    let delta = now - stillNow
    let actualCloudConsumption = calculateCloudConsumption(delta)
    env.put("cloudConsumption", actualCloudConsumption)

    let totalConsumption = actualCloudConsumption + env.get("batteryConsumption")
    env.put("totalConsumption", totalConsumption)

    updateCloudCosts()
    now
}
