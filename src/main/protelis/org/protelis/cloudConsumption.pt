module org:protelis:cloudConsumption
import it.nicolasfarabegoli.pulverization.interop.ProtelisInterop.updateCloudCosts

def jouleToWatt(joule, time) = joule / time

def calculateCloudConsumption(delta) {
    let cloudEPI = env.get("cloudEPI") / 1000000000
    let behaviourInstructions = env.get("behaviourInstructions") * 1000000
    let intraCommInstructions = env.get("intraCommInstructions") * 1000000
    let behaviourInCloud = env.get("behaviourInCloud")

    let cloudJoule = (behaviourInstructions * cloudEPI * delta) + (intraCommInstructions * cloudEPI * delta)
    let cloudWatt = jouleToWatt(cloudJoule, delta)

    let isCharging = env.get("isCharging")
    let batteryPercentage = env.get("batteryPercentage")
    if (behaviourInCloud && !isCharging && batteryPercentage > 0.0) { cloudWatt } else { 0.0 }
}

let now = self.getCurrentTime();

rep (stillNow <- now) {
    let delta = now - stillNow
    let actualCloudConsumption = if (delta > 0.0) { calculateCloudConsumption(delta) } else { 0.0 }
    env.put("cloudConsumption", actualCloudConsumption)

    let totalConsumption = actualCloudConsumption + env.get("batteryConsumption")
    env.put("totalConsumption", totalConsumption)

    updateCloudCosts()
    now
}
